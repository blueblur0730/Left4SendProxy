name: Build
on:
  push:
    branches:
     - master

  pull_request:
    branches:
     - master

  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-22.04, windows-latest, windows-2019]
        sm_version: [latest, "1.12"]
        target_arch: [x86]

        include:
          - os: ubuntu-latest
            os_short: ubuntu_latest

          - os: ubuntu-22.04
            os_short: ubuntu_22_04

          - os: windows-latest
            os_short: win_latest

          - os: windows-2019
            os_short: win_2019

          - sm_version: latest
            sm_branch: master
            sm_short: sm_latest

          - sm_version: "1.12"
            sm_branch: "1.12-dev"
            sm_short: sm_1_12

          - target_arch: x86
            vs_dev_arch: x86

          #- target_arch: x64
          #  vs_dev_arch: x86_64

    name: Build Project on ${{ matrix.os_short }}-${{ matrix.sm_version }}-${{ matrix.target_arch }}
    runs-on: ${{ matrix.os }}
    env:
      SDKS: '["l4d","l4d2"]'
      MMSOURCE_VERSION: '1.12'

    steps:
      - name: Setup Environment
        shell: bash
        run: |
          echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV
          
      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y gcc g++ g++-multilib libstdc++6
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV

      - name: Install Windows Dependencies
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          :: See https://github.com/microsoft/vswhere/wiki/Find-VC
          for /f "usebackq delims=*" %%i in (`vswhere -latest -property installationPath`) do (
            call "%%i"\Common7\Tools\vsdevcmd.bat -arch=${{ matrix.vs_dev_arch }} -host_arch=x64
          )

          :: Loop over all environment variables and make them global.
          for /f "delims== tokens=1,2" %%a in ('set') do (
            echo>>"%GITHUB_ENV%" %%a=%%b
          )
  
      - name: Add msbuild to PATH
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Setup AMBuild
        run: |
          python -m pip install wheel
          pip install git+https://github.com/alliedmodders/ambuild

      - name: Prepare Alliedmodders Directory
        shell: bash
        run: |
          mkdir alliedmodders

      - name: Setup SourceMod-${{ matrix.sm_version }}
        uses: actions/checkout@v4
        with:
          repository: alliedmodders/sourcemod
          ref: ${{ matrix.sm_branch }}
          path: ${{ matrix.sm_short }}
          submodules: recursive

      - name: Prepare L4D SDK
        working-directory: alliedmodders
        run: |
          git clone --mirror https://github.com/alliedmodders/hl2sdk hl2sdk-proxy-repo
          git clone hl2sdk-proxy-repo hl2sdk-l4d2 -b l4d2
          git clone hl2sdk-proxy-repo hl2sdk-l4d -b l4d
          
      - name: Prepare Metamod Source-${{ env.MMSOURCE_VERSION }}
        working-directory: alliedmodders
        run: |
          git clone https://github.com/alliedmodders/metamod-source mmsource-${{ env.MMSOURCE_VERSION }} -b ${{ env.MMSOURCE_VERSION }}-dev

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: src

      - name: Get Extension version
        shell: bash
        working-directory: src/extension
        run: |
          echo "EXT_VERSION=$(grep -E 'SMEXT_CONF_VERSION' ./smsdk_config.h | grep -oE '[0-9]+\.[0-9]+\.[0-9]')" >> $GITHUB_ENV

      - name: Run AMBuild
        working-directory: src
        shell: bash
        run: |
          cd extension
          mkdir build
          cd build
          python ../configure.py \
            --hl2sdk-root="${{ github.workspace }}/alliedmodders" \
            --sm-path="${{ github.workspace }}/alliedmodders/sourcemod" \
            --mms-path="${{ github.workspace }}/alliedmodders/mmsource-${{ env.MMSOURCE_VERSION }}" \
            --sdks=${{ join(fromJSON(env.SDKS)) }}
          ambuild

      - name: Copy to addons directory
        working-directory: src
        shell: bash
        run: |
          cp -r extension/build/package/addons/sourcemod/extensions addons/sourcemod

      - name: Upload Binary (Package)
        uses: actions/upload-artifact@v4
        with:
          name: sendproxy-${{ env.EXT_VERSION }}.${{ env.GITHUB_SHA_SHORT }}-${{ matrix.os_short }}-${{ matrix.sm_short }}-${{ matrix.target_arch }}
          path: src/addons